(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: '\\x97\\xf9\\x96\\xf91\\xfeg\\xf9Z\\xfe\\r\\xfe\\xc7\\xf9\\x8d\\xfe\\r\\xfe\\x95\\xfe\\x97\\xfe\\xae\\xfe\\xac\\xfe\\xae\\xfey\\xfdy\\xfc\\x96\\xf9\\x96\\xf9g\\xf9\\x1a\\xe2\\r\\xfc\\x1a\\xe2\\x1a\\xe2\\r\\xfc\\x1a\\xe2\\x8d\\xfe\\x95\\xfe\\x95\\xfe\\r\\xfe\\x95\\xfe\\xac\\xfe\\xae\\xfey\\xfdy\\xfdy\\xfc1\\xfey\\xfdy\\xfc1\\xfe\\x96\\xf91\\xfe\\r\\xfc\\x1a\\xe2\\x8d\\xfeg\\xf9Z\\xfeo\\xf9J\\xfe\\x97\\xfe\\xae\\xfe\\xac\\xfey\\xfd\\xae\\xfe\\xae\\xfey\\xfd\\x97\\xfe\\x97\\xf9y\\xfdy\\xfdy\\xfc1\\xfe\\x96\\xf91\\xfe\\x96\\xf9\\x96\\xf9\\x96\\xf91\\xfeg\\xf9\\x1a\\xe2\\x8d\\xfe\\x95\\xfe\\xac\\xfe\\xac\\xfe\\xac\\xfe\\x95\\xfe\\x97\\xfe\\x8d\\xfeg\\xf9Z\\xfe\\x8d\\xfe\\x95\\xfe\\x95\\xfe\\xae\\xfe\\xae\\xfey\\xfd\\xae\\xfey\\xfdy\\xfd\\xae\\xfey\\xfd\\x97\\xf9\\x96\\xf9\\x96\\xf9M\\xf8\\r\\xf8\\r\\xfc\\x96\\xf9\\xc7\\xf9\\x96\\xf9\\x96\\xf9'"
p3
sS'layer'
p4
S'/home/ismael/Escritorio/web2py/applications/arduino_scada/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\nimport serial\nimport time\n\ndef index():\n    \t\n\tgrid = SQLFORM.grid(db.valores,details=False,csv=False,deletable=False,editable=False)\n\treturn dict(grid=grid)\n\t\npuerto_Serie=serial.Serial(\'/dev/ttyACM0\', 115200, timeout=1.0)   # En windows COM34\npuerto_Serie.close()\npuerto_Serie.open()\n\ndef recibe_datos():\n\t\n\tcadena=\'\'\n\tdatos=[]\n\tvalor=str(request.vars.Valor)\n\t\n\tif (valor==\'1\'):\n\t\tdb.valores.insert(valor=True)\n\t\tcadena=\'a\'\n\n\tif (valor==\'0\'):\n\t\tdb.valores.insert(valor=False)\n\t\tcadena=\'b\'\n\t\n\n\t## ENCENDER (a), Y APAGAR (b) \n\tpuerto_Serie.write(cadena)   # Mandamos por puerto serie lo le\xc3\xaddo desde el teclado\n\t\n\tif puerto_Serie.inWaiting() > 0:\n\t\t\n\t\tdatos = puerto_Serie.readline()\n\t\tdato_puerta=datos[7]\n\t\tdato_nivel=datos[17:]\n\t\tdic = {"nivel":int(dato_nivel) , "puerta":dato_puerta}\n\n\t\treturn dic\n\n\t\ttime.sleep(0.1)   # Peque\xc3\xb1o tiempo de espera para esperar\n\t\t\n\t\tdatos=[]\n\t\t\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\n\nresponse._vars=response._caller(recibe_datos)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ismael/Escritorio/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/ismael/Escritorio/web2py/applications/arduino_scada/controllers/default.py", line 105, in <module>\n  File "/home/ismael/Escritorio/web2py/gluon/globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ismael/Escritorio/web2py/applications/arduino_scada/controllers/default.py", line 46, in recibe_datos\n    dic = {"nivel":int(dato_nivel) , "puerta":dato_puerta}\nValueError: invalid literal for int() with base 10: \'\\x97\\xf9\\x96\\xf91\\xfeg\\xf9Z\\xfe\\r\\xfe\\xc7\\xf9\\x8d\\xfe\\r\\xfe\\x95\\xfe\\x97\\xfe\\xae\\xfe\\xac\\xfe\\xae\\xfey\\xfdy\\xfc\\x96\\xf9\\x96\\xf9g\\xf9\\x1a\\xe2\\r\\xfc\\x1a\\xe2\\x1a\\xe2\\r\\xfc\\x1a\\xe2\\x8d\\xfe\\x95\\xfe\\x95\\xfe\\r\\xfe\\x95\\xfe\\xac\\xfe\\xae\\xfey\\xfdy\\xfdy\\xfc1\\xfey\\xfdy\\xfc1\\xfe\\x96\\xf91\\xfe\\r\\xfc\\x1a\\xe2\\x8d\\xfeg\\xf9Z\\xfeo\\xf9J\\xfe\\x97\\xfe\\xae\\xfe\\xac\\xfey\\xfd\\xae\\xfe\\xae\\xfey\\xfd\\x97\\xfe\\x97\\xf9y\\xfdy\\xfdy\\xfc1\\xfe\\x96\\xf91\\xfe\\x96\\xf9\\x96\\xf9\\x96\\xf91\\xfeg\\xf9\\x1a\\xe2\\x8d\\xfe\\x95\\xfe\\xac\\xfe\\xac\\xfe\\xac\\xfe\\x95\\xfe\\x97\\xfe\\x8d\\xfeg\\xf9Z\\xfe\\x8d\\xfe\\x95\\xfe\\x95\\xfe\\xae\\xfe\\xae\\xfey\\xfd\\xae\\xfey\\xfdy\\xfd\\xae\\xfey\\xfd\\x97\\xf9\\x96\\xf9\\x96\\xf9M\\xf8\\r\\xf8\\r\\xfc\\x96\\xf9\\xc7\\xf9\\x96\\xf9\\x96\\xf9\'\n'
p11
s.