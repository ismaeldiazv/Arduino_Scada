(dp1
S'output'
p2
S"<class 'socket.timeout'> timed out"
p3
sS'layer'
p4
S'/home/ismael/Escritorio/web2py/applications/Modbus_S7/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n\n# Importamos las librerias de modbus\nimport modbus_tk\nimport modbus_tk.defines as cst\nimport modbus_tk.modbus_tcp as modbus_tcp\n\n\n\n# ESCRITURA DE SALIDAS        host="192.168.1.10",\nmaster = modbus_tcp.TcpMaster(host="192.168.1.10",port=5000) \n\ndef index():\n    \n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n      \n# Funcion de lectura de PLC\ndef IN_PLC():\n\t\n\ta=master.execute(1,cst.READ_HOLDING_REGISTERS,0,16)\n\t\n\tresultado_IN=master.execute(1,cst.READ_HOLDING_REGISTERS,0,8)  # Resultado_IN, recoge el valor de la lectura de los registros del 0 al 8 \n\t\n\tdic = {"IN":a}\n\n\treturn dic\n\t\n    \n\n# Funcion de escritura de salidas de PLC\t\ndef OUT_0_ON():\n     \n\tmaster.execute(1, cst.WRITE_SINGLE_REGISTER, 8, output_value=1)\n\t    \ndef OUT_0_OFF():\n    \n\t\n\tmaster.execute(1, cst.WRITE_SINGLE_REGISTER, 8, output_value=0)\t\n\t\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\n\nresponse._vars=response._caller(IN_PLC)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ismael/Escritorio/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/ismael/Escritorio/web2py/applications/Modbus_S7/controllers/default.py", line 89, in <module>\n  File "/home/ismael/Escritorio/web2py/gluon/globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ismael/Escritorio/web2py/applications/Modbus_S7/controllers/default.py", line 22, in IN_PLC\n    a=master.execute(1,cst.READ_HOLDING_REGISTERS,0,16)\n  File "modbus_tk/utils.py", line 26, in new\n    raise excpt\ntimeout: timed out\n'
p11
s.