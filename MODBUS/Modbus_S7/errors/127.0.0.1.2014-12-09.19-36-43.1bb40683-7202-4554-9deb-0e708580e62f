(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'modbus_tk' is not defined"
p3
sS'layer'
p4
S'/home/ismael/Escritorio/web2py/applications/Modbus_S7/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\n\n\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n    \n    \ndef IN_PLC():\n\t\n\t\n\ttry:\n\t\t#Connect to the slave\n\t\tmaster = modbus_tcp.TcpMaster(port=5000)  # Para ser cliente de otro equipo ponemos lo siguiente: host="IP DEL ESCLAVO(SERVIDOR)"\n\t\t\n\t\tmaster.execute(1, cst.WRITE_SINGLE_REGISTER, 5, output_value=1)\n\t\t\n\t\tresultado_IN=master.execute(1, cst.READ_HOLDING_REGISTERS, 0, 8) # (ID,CODIGO,INICIO,NUMERO A PARTIR DE INICIO)\n\t\tprint resultado_IN\n\t\t\n\t\tIN=resultado_IN\n\t\n\t\tdic = {"I0":IN[0],"I1":IN[1],"I2":IN[2],"I3":IN[3],"I4":IN[4],"I5":IN[5],"I6":IN[6],"I7":IN[7]}\n\t\n\t\t\n\t\t#i=0\n\t\t\t\n\t\t#for i in resultado_IN:\n\t\t #   if i == 1:\n\t\t  #      print "ON"\n\t\t   # if i == 0:\n\t\t\t#    print "OFF"\n\t\t\t\t\t\n\t\t\n\t\t\t\t\n\t\t\n\texcept modbus_tk.modbus.ModbusError, e:\n\t\tprint "Modbus error ", e.get_exception_code()\n\n\texcept Exception, e2:\n\t\tprint "Error ", str(e2)\n\t\n\t\n\t\n\treturn dic\n\t\n\t\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(IN_PLC)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ismael/Escritorio/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/ismael/Escritorio/web2py/applications/Modbus_S7/controllers/default.py", line 116, in <module>\n  File "/home/ismael/Escritorio/web2py/gluon/globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ismael/Escritorio/web2py/applications/Modbus_S7/controllers/default.py", line 55, in IN_PLC\n    except modbus_tk.modbus.ModbusError, e:\nNameError: global name \'modbus_tk\' is not defined\n'
p11
s.